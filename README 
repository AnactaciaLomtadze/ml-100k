basemodel.py
The MovieLens Knowledge Graph is created by processing the MovieLens 100k dataset to model relationships between users and movies in a graph structure. First, the dataset is loaded, which includes ratings, user information, and movie details. The graph (`G`) is initialized, and nodes representing users and movies are added. Each user node includes personal attributes like age, gender, and occupation, while each movie node includes attributes such as title and release date, along with genre features. These genre features are encoded as binary values (1 or 0) for the various genres associated with each movie. 

Edges between user and movie nodes are created based on the ratings given by users, with the weight of the edge corresponding to the rating value and the timestamp of the rating. To enhance the graph, movie-movie similarity edges are added based on the cosine similarity of their genre features, establishing relationships between movies with similar genres. Additionally, user profiles are built by aggregating user ratings and identifying genre preferences, which are used for personalized recommendations. The knowledge graph thus encapsulates the relationships between users, movies, and movie genres, facilitating both content-based and collaborative filtering recommendations through graph traversal and similarity measures.

forgetting.py
The `ForgettingMechanism` class is designed to model the process of memories forgetting with the passage of time and utilization in a recommendation system on the MovieLens 100k dataset. The central idea is to set up and manage the weakening of memory strength based on user-movie interactions. The class is initialized with the memory strengths specified using the ratings data, with the initial memory strength based on the user's rating (normalized to a 0 to 1 scale). This memory strength is stored in the `memory_strength` dictionary, which maps `(user_id, movie_id)` pairs to their memory strengths. In addition, `last_interaction_time` and `interaction_counts` dictionaries maintain the last interaction time of a user with a movie and the interaction count, respectively. The `implement_time_based_decay` function adds an exponential decay over memory strength as time elapses, with older interactions losing more weight based on a decay parameter. The `implement_usage_based_decay` function adjusts memory strength based on the frequency a user accesses a movie, with less frequently accessed movies decaying more quickly. The `create_hybrid_decay_function` function combines time-based, usage-based, and novelty-based decay to create a more nuanced forgetting mechanism, with weights on each decay factor for flexibility. The `personalize_forgetting_parameters` function optimizes the forgetting mechanism by personalizing decay parameters according to the user's activity patterns, such as time variability, rating diversity, and genre preferences. The `apply_forgetting_to_recommendations` function is employed to alter current recommendation scores by adjusting for the forgetting mechanism, promoting new movies and slightly penalizing known ones.
The `dynamic_half_life_adjustment` function is utilized to alter current forgetting curve based on the user's genre preference, with higher memory retention for movies that are more aligned with their preference. Finally, the `integrate_forgetting_mechanism_into_recommendation_pipeline` function integrates the forgetting mechanism into a recommendation algorithm so that it can regulate the scores of graph-based or personalized recommendations based on the strength of the user's memory. These functions offer a more dynamic and personalized approach to dealing with memory retention and decay in recommendation systems with the aim of optimizing the user experience as the system adapts over time to cater to changing user preferences.




Do I need to check this??
Novelty - How "unpopular" or unexpected are the recommendations?
Serendipity - Are the recommendations pleasantly surprising?
Fairness - Are recommendations biased toward certain groups/items?